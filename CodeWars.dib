#!csharp

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

#!csharp

class P
{
    public static void Main(string[] args)
    {
        int[] letters = new int[2];
        letters[0] = 1;
        letters[1] = 3;
        int[,] M = Mat.fillMat(letters);
        for(int i = 0;i<4;i++)
        {
            for(int j = 0; j < 4;j++)
            {
                Console.Write("" + M[i,j] + " ");
            }
            Console.WriteLine();
        }
        Console.WriteLine(M);
    }
}
P.Main(null);

#!csharp

//  P.Main(null);

#!markdown

sdadsq12123

#!csharp

class SolutionMorse
{
    public static string getTranslate(string morseCode)
    {
        morseCode = morseCode.Trim();
		string[] morse = morseCode.Split(' ');
        string result = "";
        for(int i = 0; i < morse.Length; i++)
        {
            if(morse[i] == "")
            {
                i = i + 1;
                result += " ";
                continue;
            }
            result += getLetter(morse[i]);
        }
        return result;
    }
    public static string getLetter(string input)
    {
        Dictionary<string, string> dict = new Dictionary<string, string>();
        dict.Add(".-" , "A");
        dict.Add("-..." , "B");
        dict.Add("-.-." , "C");
        dict.Add("-.." , "D");
        dict.Add("." , "E");
        dict.Add("..-." , "F");
        dict.Add("--." , "G");
        dict.Add("...." , "H");
        dict.Add(".." , "I");
        dict.Add(".---" , "J");
        dict.Add("-.-" , "K");
        dict.Add(".-.." , "L");
        dict.Add("--" , "M");
        dict.Add("-." , "N");
        dict.Add("---" , "O");
        dict.Add(".--." , "P");
        dict.Add("--.-" , "Q");
        dict.Add(".-." , "R");
        dict.Add("..." , "S");
        dict.Add("-" , "T");
        dict.Add("..-" , "U");
        dict.Add("...-" , "V");
        dict.Add(".--" , "W");
        dict.Add("-..-" , "X");
        dict.Add("-.--" , "Y");
        dict.Add("--.." , "Z");
        dict.Add(".-.-.-", ".");
        dict.Add("--..--", ",");
        dict.Add("..--..", "?");
        dict.Add("-.-.--", "!");
        dict.Add("...---...", "SOS");
        dict.Add("...---...-.-.--", "SOS!");
        
        
        if (dict.ContainsKey(input)) return dict[input];
        return "0";
    }
}

#!csharp

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

class SolutionStringMix
{
    public static bool isAZ(char letter)
    {
        Regex rx = new Regex("[a-z]");
        return rx.Matches(Char.ToString(letter)).Count != 0;
    }
    public static string Mix(string Word1, string Word2)
    {
        Regex rx = new Regex("[a-z]");
        Dictionary<char, string> marker = new Dictionary<char , string>();
        Dictionary<char, int> word1 = new Dictionary<char, int>();
        Dictionary<char, int> word2 = new Dictionary<char, int>();
        Dictionary<char, int> word = new Dictionary<char, int>();
        for (int i = 0; i < Word1.Length; i++)
        {
            // Console.WriteLine("bool = " + word1.ContainsKey(Word1[i]) + " | n = " + Word1[i]);
            if (rx.Matches(Char.ToString(Word1[i])).Count == 0) continue; // check that letter betwwen a-z 
            if (!word1.ContainsKey(Word1[i])) word1.Add(Word1[i], 1);
            else word1[Word1[i]] = word1[Word1[i]] + 1;
        }
        for (int i = 0; i < Word2.Length; i++)
        {
            if (rx.Matches(Char.ToString(Word2[i])).Count == 0) continue; // check that letter betwwen a-z 
            if (!word2.ContainsKey(Word2[i])) word2.Add(Word2[i], 1);
            else word2[Word2[i]] = word2[Word2[i]] + 1;
        }
        foreach (KeyValuePair<char, int> pair in word1) 
        {
            word.Add(pair.Key,pair.Value);
            marker.Add(pair.Key,"1");
        }
        foreach (KeyValuePair<char, int> pair in word2) 
        {
            if (word.ContainsKey(pair.Key))
            {
                if(pair.Value == word[pair.Key])
                {
                    // Console.WriteLine(pair.Key + "|" + pair.Value + " > " + word[pair.Key]);
                    marker[pair.Key] = "=";
                    // Console.WriteLine(pair.Key + " | " + word[pair.Key]);
                }
                if(pair.Value > word[pair.Key])
                {
                    // Console.WriteLine(""+ pair.Key + "|" + pair.Value + " > " + word[pair.Key]);
                    word[pair.Key] = pair.Value;
                    marker[pair.Key] = "2";
                }
                continue;
            }
            word.Add(pair.Key,pair.Value);
            marker.Add(pair.Key , "2");
        }
        int k = 0;
        string result = "";
        string result1 = "";
        foreach(KeyValuePair<char, int> pair in word) 
        {
            k = pair.Value;
            result += marker[pair.Key];
            result += ":";
            while(k > 0)
            {
                result += "" + pair.Key;
                k = k - 1;
            }
            result +="/";
            // Console.WriteLine("" + pair.Key + pair.Value + " | " + marker[pair.Key]);
            k++;
        }
        Dictionary<char , double> JIJA = new Dictionary<char , double>();
        double bf_marker = 0;
        foreach (var pair in word)
        {
            bf_marker = getMarker(marker[pair.Key]) + pair.Value + 1/(double)((int)pair.Key);
            JIJA.Add(pair.Key , bf_marker);
            Console.WriteLine(pair.Key + " | " + bf_marker+ " | " + 1/(double)((int)pair.Key));
        }
        foreach (var pair in JIJA.OrderByDescending(pair => pair.Value))
        {
            k = word[pair.Key];
            if(k <= 1) 
            {
                continue;
            }
            result1 += marker[pair.Key];
            result1 += ":";
            while(k > 0)
            {
                result1 += "" + pair.Key;
                k = k - 1;
            }
            result1 += "/";
            // Console.WriteLine("" + pair.Key + pair.Value + " | " + marker[pair.Key]);result1 +="/";
        }
        return result1.Trim('/');
    }
    public static double getMarker(string letter)
    {
        if (letter == "1") return 0.5;
        if (letter == "2") return 0;
        if (letter == "=") return -0.2;
        return 0;
    }
}

#!csharp

class SolutionScreenLockingPatterns
{
    public static int CountPatternsFrom(char firstDot, int length)
    {

        return 0;
        
    }
}

#!csharp

using System;

class Mat
{
    public static int Kolvo(char letter, int length)
    {
        return 0;
    }


    public static int[,] fillMat(int[] letters)
    {
        int n = 9;
        int m = n - letters.Length;
        Console.WriteLine("m = " + m);


        int[,] Matrix = new int[m,m];
        for(int i = 0;i < m;i++)
        {
            for(int j = 0; j < m;j++)
            {
                Matrix[i,j] = 1;
            }
        }
        return Matrix;
    }
}

#!csharp

class ProperFractionsSol
{

    public static long ProperFractions2(long n)
    {
        List<long> frac = new List<long>();
        frac.Add(1);
        long n1 = n;
        long i = 1;
        while(i*i < n1)
        {
            i++;
            if(n1%i == 0)
            {
                frac.Add(i);
                Console.WriteLine(i);
                while(n1%i == 0) n1 = n1/i;
            }
            
        }
        if(n1 != 1) frac.Add(n1);
        long sum = 1;
        foreach(long d in frac)
        {
            if(d == 1) continue;
           sum += (n/d) - 1;
           Console.WriteLine(sum);
           foreach(long d1 in frac)
           {
            if(d1 > d && n%(d1*d) == 0)
            {
                sum -= n/(d1*d);
                Console.WriteLine("-" + sum + "| " + d1 + " | " + d);
            }
           }
        }   
        Console.WriteLine("\n" + sum);
        return n - sum;
    }

    public static long ProperFractions3(long n)
    {
        List<long> frac = new List<long>();
        List<int> pow = new List<int> ();
        List<long> Frac = new List<long>();
         frac.Add(1);
        long n1 = n;
        long n2 = n;
        long k = 1;
        while(k*k < n1)
        {
            k++;
            if(n1%k == 0)
            {
                
                while(n1%k == 0) 
                {
                    frac.Add(k);
                    n1 = n1/k;
                }
            }
            
        }
        if(n1 != 1) frac.Add(n1);
        int p = 0;
        foreach(long f in frac)
        {
            if(!Frac.Contains(f))
            {
                Frac.Add(f);
                pow.Add(1);
                p++;
            }else
            {
                n = n/Frac[p-1];
                pow[p-1] = pow[p-1] + 1;
            }
        }
        Console.WriteLine("-----" + n);
        foreach(long d in Frac)
        {
            Console.WriteLine("---" + d + "---");
        }
        
        long sum = 0;
        long buff = 0;
        for(int i = 1; i < Frac.Count;i++)
        {
            buff = Frac[i];
           sum += (n/buff) - 1;
           Console.WriteLine("+" + sum);
            
            for(int j = i + 1; j < Frac.Count;j++)
            {
                
                buff = Frac[i]*Frac[j];
                sum -= ((n/buff) - 1);
                Console.WriteLine("-" + sum + " | " + Frac[i] + " | " + Frac[j] +" | " +n/(buff) );
                
            }
        }
        sum ++;
        int Sum = 0;
        double Mlt = 1;
        for(int i = 0; i < Frac.Count;i++)
        {
            if(pow[i] != 1)
            Mlt = Mlt*Math.Pow(Frac[i],pow[i] - 1);
        }
        long Mlt1 = Convert.ToInt64(Mlt);
        long Res = (sum*Mlt1);
        Console.WriteLine("sum = " + sum);
        Console.WriteLine("Frac = " + Frac.Count);
        foreach(long F in Frac) Console.WriteLine(F);
        Console.WriteLine("Mlt = " + Mlt1);
        if( sum == 0) return (Frac[1]-1)*Mlt1;
       
        Console.WriteLine("\n" + Mlt1 + " | " + Res);
        return n2 - Res;
    }
    public static long ProperFractions4(long n)
    {
        List<long> frac = new List<long>();
        List<int> pow = new List<int> ();
        List<long> Frac = new List<long>();
         frac.Add(1);
        long n1 = n;
        long n2 = n;
        long k = 1;
        while(k*k < n1)
        {
            k++;
            if(n1%k == 0)
            {
                
                while(n1%k == 0) 
                {
                    frac.Add(k);
                    n1 = n1/k;
                }
            }
            
        }
        if(n1 != 1) frac.Add(n1);
        int p = 0;
        foreach(long f in frac)
        {
            if(!Frac.Contains(f))
            {
                Frac.Add(f);
                pow.Add(1);
                p++;
            }else
            {
                n = n/Frac[p-1];
                pow[p-1] = pow[p-1] + 1;
            }
        }
        Console.WriteLine("-----" + n);
        foreach(long d in Frac)
        {
            Console.WriteLine("---" + d + "---");
        }
        
        long sum = 0;
        long buff = 0;
        for(int i = 1; i < Frac.Count;i++)
        {
            buff = Frac[i];
           sum += (n/buff) - 1;
           Console.WriteLine(sum);
            
            for(int j = i + 1; j < Frac.Count;j++)
            {
                
                buff = Frac[i]*Frac[j];
                sum -= ((n/buff) - 1);
                Console.WriteLine("-" + sum + " | " + Frac[i] + " | " + Frac[j] +" | " +n/(buff) );
                
            }
        }
        Console.WriteLine(sum);
        return n2 - sum;
    }
}

#!csharp

class P
{
    public static void Main(string[] args)
    {
        int[] jija = new int[2];
        jija[0] = 1;
        jija[1] = 1;
        Mat.fillMat(jija);
    }
}
P.Main(null);

#!csharp

P.Main(null);

#!csharp

(int)'b' - (int)'a' + 1
